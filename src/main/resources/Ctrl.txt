package ${basePackage}.${mdlNameLower}.${ettNameLower}.ctrl;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Positive;
import javax.validation.constraints.PositiveOrZero;

import com.googlecode.jmapper.JMapper;
import io.swagger.annotations.ApiOperation;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Pageable;
import ${basePackage}.common.util.SearchUtil;
import ${basePackage}.model.enumeration.SortOrderEnum;
import ${basePackage}.common.exception.BaseException;
import ${basePackage}.common.util.RequestUtil;
import ${basePackage}.model.dto.SuccessResponse;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.dto.${ettNamePpt}Request;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.dto.${ettNamePpt}Dto;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.service.${ettNamePpt}Service;


/**
 * Basic ${ettNamePpt} CRUD APIs
 * @author KhanhTD
 *
 */

@RestController
@RequestMapping("/${ettRequestMapping}")
@Tag(name = "${ettNamePpt} Controller")
public class ${ettNamePpt}Ctrl {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    private JMapper<${ettNamePpt}Dto, ${ettNamePpt}> jmapper = new JMapper<>(${ettNamePpt}Dto.class, ${ettNamePpt}.class);

    @Autowired
    private ${ettNamePpt}Service ${ettNameCamel}Service;

    /**
        * Create ${ettNamePpt} from request body
        * @param request - object to create
        * @return new ${ettNamePpt} id if succeed
    */
    @PostMapping("/create")
    @ApiOperation("Create ${ett.nameProperty}")
    public SuccessResponse<String> create(@Valid @RequestBody ${ettNamePpt}Request request) {
        return RequestUtil.ok(${ettNameCamel}Service.create(request));
    }

    /**
        * Update all fields in the request body
        * @param request - update object
        * @return
        * @throws BaseException if ${ettNamePpt}Dto id is not found
    */
    @PutMapping("/update")
    @ApiOperation("Update ${ett.nameProperty}")
    public SuccessResponse update(@RequestBody ${ettNamePpt}Request request) throws BaseException {
        ${ettNameCamel}Service.update(request);
        return new SuccessResponse();
    }

    /**
        * Find ${ettNamePpt} records by name column and others
        * @param request - Advanced filter conditions
        * @param page - Zero-based page number
        * @param size - Page size
        * @param sort - Sort column
        * @param order - Sort direction
        * @return Paged ${ettNamePpt} list
    */
    @PostMapping("/search")
    @ApiOperation("Search ${ett.nameProperty}")
    public PageResponse<CategoryDto,Category> advancedSearch(
            @RequestBody ${ettNamePpt}Request request, @PositiveOrZero @RequestParam(required = false, defaultValue = "0") Integer page,
            @Positive @RequestParam(required = false) Integer size, @RequestParam(required = false) String sort,
            @RequestParam(required = false) SortOrderEnum order
    ) {
        Pageable pageable = SearchUtil.getPageableFromParam(page, size, sort, order);
        Page<Category> pageData = ${ettNameCamel}Service.advancedSearch(request, pageable);
        return new PageResponse<>(pageData, jmapper);
    }

    /**
       * Delete ${ett.nameProperty} by id
       * @param id of ${ett.nameProperty}
       * @return
       * @throws BaseException id is not found
    */
    @DeleteMapping("/{id}")
    @ApiOperation("Delete ${ett.nameProperty}")
    public SuccessResponse delete(@PathVariable String id) throws BaseException {
        ${ettNameCamel}Service.delete(id);
        return new SuccessResponse();
    }

    /**
       * Approve ${ett.nameProperty} by id
       * @param id of ${ett.nameProperty}
       * @return
       * @throws BaseException id is not found
    */
    @PutMapping("/approve/{id}")
    @ApiOperation("Approve ${ett.nameProperty}")
    public SuccessResponse approve(@PathVariable String id) throws BaseException {
        ${ettNameCamel}Service.approve(id);
        return new SuccessResponse();
    }

#foreach($ppt in $ppts)
#set($namePptCamel = $textUtils.wordsToCamel(${ppt.nameProperty}))
#set($ref = $ppt.refType)
#set($canFilterBy = $ppt.canFilterBy)
#if($ref.isBlank() && $canFilterBy.isBlank())
#elseif($ref.isBlank() && $canFilterBy == 'TRUE')
    /**
       * Find by ${ppt.entityKey} ${ppt.nameProperty}
       * @param $textUtils.wordsToCamelFirstUpper(${ppt.nameProperty}) of ${ppt.entityKey}
       * @return
       * @throws BaseException $textUtils.wordsToCamelFirstUpper(${ppt.nameProperty}) is not found
    */
    @GetMapping()
    @ApiOperation("Get ${ppt.entityKey} by ${ppt.nameProperty}")
    public SuccessResponse<List<${ppt.entityKey}Dto>> find${ppt.entityKey}By$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})(@RequestParam ${ppt.type} $textUtils.wordsToCamel(${ppt.nameProperty})) throws BaseException {
        return RequestUtil.ok($textUtils.wordsToCamel(${ppt.entityKey}).concat("Service.find").concat(${ppt.refType}).concat("By").concat($textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})).concat("(").concat($namePptCamel).concat(");")
    }
#elseif($ref != ${ppt.entityKey} && $canFilterBy == 'TRUE')
    /**
       * Find ${ppt.refType} by ${ppt.entityKey} ${ppt.nameProperty}
       * @param ${ppt.nameProperty} of ${ppt.entityKey}
       * @return
       * @throws BaseException ${ppt.nameProperty} is not found
    */
    @GetMapping("/{$textUtils.wordsToCamel(${ppt.nameProperty})}/$textUtils.wordsToKebabLower(${ppt.refType})")
    @ApiOperation("Get ${ppt.refType} by ${ppt.entityKey} ${ppt.nameProperty}")
    public SuccessResponse<List<${ppt.refType}Dto>> find${ppt.refType}By$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})(@PathVariable ${ppt.type} $textUtils.wordsToCamel(${ppt.nameProperty})) throws BaseException {
        return RequestUtil.ok($textUtils.wordsToCamel(${ppt.entityKey}).concat("Service.find").concat(${ppt.refType}).concat("By").concat($textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})).concat("(").concat($namePptCamel).concat(");")
    }
#end
#end
}
