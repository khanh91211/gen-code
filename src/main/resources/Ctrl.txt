package ${basePackage}.${pckNameLower}.ctrl;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Positive;
import javax.validation.constraints.PositiveOrZero;

import io.swagger.annotations.ApiOperation;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Pageable;
import ${basePackageImport}.core.util.SearchUtil;
import ${basePackageImport}.core.util.RequestUtil;
import ${basePackage}.${ettNameLower}.service.${ettFirstUpperCamel}Service;
import ${basePackageImport}.model.Paging;
import ${basePackageImport}.model.enumeration.SortOrderEnum;
import ${basePackageImport}.model.dto.exception.BusinessException;
import ${basePackageImport}.model.dto.SuccessResponse;
import ${basePackageImport}.model.dto.request.ApproveRequest;
import ${basePackageImport}.model.dto.response.UploadFileResponse;
import ${basePackageImport}.model.entity.${pckNameLower}.${ettFirstUpperCamel};
import ${basePackageImport}.model.dto.request.${ettFirstUpperCamel}Request;
import ${basePackageImport}.model.dto.${pckNameLower}.${ettFirstUpperCamel}Dto;

/**
 * Basic ${ettFirstUpperCamel} CRUD APIs
 * @author KhanhTD
 *
 */
@RestController
@RequestMapping("/v1.0/ch/${ettRequestMapping}")
@Tag(name = "${ettFirstUpperCamel} Controller")
public class ${ettFirstUpperCamel}Ctrl extends BaseController {
    @Autowired
    private ${pckFirstUpperCamel}CommonService ${pckNameLower}Service;

    /**
        * Upload from request
        * @param file
        * @param data
        * @param id
        * @return
        * @throws BusinessException
    */
    @ApiOperation(value = "Api upload ${ettNameCamel}")
    @PostMapping(value = "/upload")
    @ResponseBody
    public SuccessResponse<UploadFileResponse> upload(
            @Valid @RequestParam("file") MultipartFile file,
            @RequestParam("data") String data, @RequestParam(required = false) Long id) throws IOException, BusinessException {
        return RequestUtil.ok(${pckNameLower}Service.upload(file, data, id, this.getUsername()));
    }

    /**
        * Approve from request
        * @param request
        * @return
        * @throws BusinessException
    */
    @ApiOperation(value = "Api approve ${ettNameCamel}")
    @PostMapping(value = "/approve")
    @ResponseBody
    public SuccessResponse<String> approve(@Valid @RequestBody ApproveRequest request) throws BusinessException {
        return RequestUtil.ok(${pckNameLower}Service.approve(request, this.getUsername(), this.getRoles()));
    }

    /**
        * Download by id
        * @param id
        * @return
        * @throws BusinessException
    */
    @ApiOperation(value = "Api download ${ettNameCamel}")
    @GetMapping(value = "/download")
    @ResponseStatus(HttpStatus.OK)
    public Object download(@RequestParam("id") Long ${ettNameLower}Id) throws IOException, BusinessException {
        return ${pckNameLower}Service.download(${ettNameLower}Id);
    }

    /**
       * Delete by id
       * @param id ${ettFirstUpperCamel}
       * @return
       * @throws BusinessException
    */
    @ApiOperation("Delete ${ettNameCamel}")
    @DeleteMapping("/{id}/delete")
    public SuccessResponse<Object> delete(@Valid @PathVariable String id) throws BusinessException {
        return RequestUtil.ok(${pckNameLower}Service.delete(id, this.getRoles));
    }

    /**
        * Advance search ${ettNameCamel}
        * @param request
        * @param page
        * @param size
        * @param sort
        * @param order
        * @return Paged ${ettNameCamel}
    */
    @ApiOperation("Search ${ettNameCamel}")
    @PostMapping("/advance-search")
    public SuccessResponse<Paging<${ettFirstUpperCamel}Dto>> advanceSearch(
            @Valid @RequestBody Search${ettFirstUpperCamel}Request request,
            @PositiveOrZero @RequestParam(required = false, defaultValue = "0") @ApiParam(example = "0") Integer page,
            @Positive @RequestParam(required = false) @ApiParam(example = "10") @Max(100) Integer size,
            @RequestParam(required = false) String sort,
            @RequestParam(required = false) @ApiParam(example = "DESC") SortOrderEnum order
    ) {
        Pageable pageable = SearchUtil.getPageableFromParam(page, size, sort, order);
        return RequestUtil.ok(${pckNameLower}Service.advanceSearch(request, pageable, this.getRoles));
    }

    /**
        * Detail ${ettNameCamel}
        * @param id
        * @return ${ettFirstUpperCamel}
    */
    @ApiOperation(value = "Api detail ${ettNameCamel}")
    @GetMapping(value = "/{id}")
    @ResponseBody
    public SuccessResponse<${ettFirstUpperCamel}> findById(@PathVariable("id") Long id) {
        return RequestUtil.ok(${pckNameLower}Service.findById(id));
    }
}
