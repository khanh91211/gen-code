package ${basePackage}.${mdlNameLower}.${ettNameLower}.service;

import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Page;
import ${basePackage}.common.exception.BaseException;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.dto.${ettNamePpt}Dto;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.dto.${ettNamePpt}Request;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.entity.${ettNamePpt};
#set($uniqueEttRef = [])
#foreach($ppt in $ppts)
#set($ref = $ppt.refType)
#set($canFilterBy = $ppt.canFilterBy)
#if($ref.isBlank() && $ref == ${ppt.entityKey} && $uniqueEttRef.contains( $ppt.refType ) )
#elseif($ref == ${ett.nameProperty} )
#else
#set($addUniqueEttRef = $uniqueEttRef.add($ref))
#end
#end
#foreach($ettRef in $uniqueEttRef)
#if($ettRef.isBlank())
#else
import ${basePackage}.${mdlNameLower}.$textUtils.wordsToLowerCase(${ettRef.toString()}).concat(".dto.").concat($textUtils.wordsToCamelFirstUpper(${ettRef.toString()})).concat("Dto;")
#end
#end

import java.util.List;

public interface ${ettNamePpt}Service {
    String create(${ettNamePpt}Request request);

    void update(${ettNamePpt}Request request) throws BaseException;

    Page<${ettNamePpt}> advancedSearch(${ettNamePpt}Request request, Pageable pageable);

    void delete(String id) throws BaseException;

    void approve(String id) throws BaseException;

#foreach($ppt in $ppts)
#set($namePptCamel = $textUtils.wordsToCamel(${ppt.nameProperty}))
#set($ref = $ppt.refType)
#set($canFilterBy = $ppt.canFilterBy)
#if($ref.isBlank() && $canFilterBy.isBlank())
#elseif($ref.isBlank() && $canFilterBy == 'TRUE')
    List<${ppt.entityKey}Dto> findBy$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})(${ppt.type} $textUtils.wordsToCamel(${ppt.nameProperty})) throws BaseException;

#elseif($ref != ${ppt.entityKey} && $canFilterBy == 'TRUE')
    List<${ppt.refType}Dto> find${ppt.refType}By$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})(${ppt.type} $textUtils.wordsToCamel(${ppt.nameProperty})) throws BaseException;

#end
#end
}
