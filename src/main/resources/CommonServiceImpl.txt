package ${basePackage}.test.service.impl;

import lombok.extern.log4j.Log4j2;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.PostConstruct;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;

import ${basePackageImport}.core.util.SearchUtil;
import ${basePackageImport}.core.util.CommonUtil;
import ${basePackageImport}.core.util.ExcelUtil;
import ${basePackageImport}.model.Paging;
import ${basePackageImport}.model.dto.exception.BusinessException;
import ${basePackageImport}.model.dto.request.ApproveRequest;
import ${basePackageImport}.model.dto.${pckNameLower}.Search${pckFirstUpperCamel}Request;
import ${basePackageImport}.model.dto.response.UploadFileResponse;
import ${basePackageImport}.model.enumeration.ApproveMessageEnum;
import ${basePackageImport}.model.enumeration.StatusConfiguration;
import ${basePackageImport}.model.enumeration.ValidateErrorCode;
import ${basePackageImport}.model.dto.upload.CheckUploadDto;
import ${basePackageImport}.model.dto.upload.DataUploadDto;
import ${basePackageImport}.model.dto.${pckNameLower}.${pckFirstUpperCamel}Dto;
import ${basePackageImport}.model.entity.${pckNameLower}.${pckFirstUpperCamel};
import ${basePackage}.${pckNameLower}.repository.${pckFirstUpperCamel}Repository;
import ${basePackage}.${pckNameLower}.service.${pckFirstUpperCamel}CommonService;
import ${basePackage}.${pckNameLower}.service.adapter.${pckFirstUpperCamel}CommonAdapter;

/**
 * @author khanhtd
 * @Date 2023
 */
@Service
@Log4j2
public class ${pckFirstUpperCamel}CommonServiceImpl implements ${pckFirstUpperCamel}CommonService {
    @Autowired
    private List<${pckFirstUpperCamel}CommonAdapter> serviceList;

    private Map<String, ${pckFirstUpperCamel}CommonAdapter> serviceMap;

    @Autowired
    private ${pckFirstUpperCamel}Repository ${pckNameLower}Repository;

    /**
     * init serviceMap
     */
    @PostConstruct
    public void init() {
        serviceMap = new HashMap<>();
        for (${pckFirstUpperCamel}CommonAdapter svc : serviceList) {
            serviceMap.put(svc.getSupportService(), svc);
        }
    }

    /**
     * Upload test
     *
     * @param file, data, id, username  Kênh truyền vào
     * @return
     */
    @Override
    @Transactional(readOnly = true)
    public UploadFileResponse upload(MultipartFile file, String data, Long id, String username) throws IOException, BusinessException {
        ${pckFirstUpperCamel} ${pckNameLower} = new ${pckFirstUpperCamel}();
        if (id != null) {
            Optional<${pckFirstUpperCamel}> o${pckFirstUpperCamel} = ${pckNameLower}Repository.findById(id);
            if (!o${pckFirstUpperCamel}.isPresent()) {
                throw new BusinessException(ValidateErrorCode.NO_DOCUMENT_DATA);
            }
            ${pckNameLower} = o${pckFirstUpperCamel}.get();
            ${pckNameLower}.setModifiedDate(new Date());
            if (${pckNameLower}.getType() != null) {
                ${pckFirstUpperCamel}CommonAdapter svc = serviceMap.get(${pckNameLower}.getType());
                if (svc != null) {
                    svc.cleanAllById(id);
                }
            }
        } else {
            ${pckNameLower}.setStatus(StatusConfiguration.TMP.getStatus());
        }

        DataUploadDto dataUploadInput = CommonUtil.stringToBean(data, DataUploadDto.class);
        BeanUtils.copyProperties(dataUploadInput, ${pckNameLower}, "id");
        ${pckNameLower}.setFileName(StringUtils.cleanPath(Objects.requireNonNull(file.getOriginalFilename())));
        ${pckNameLower}.setData(file.getBytes());
        ${pckNameLower}.setCreator(username);
//        setEndDateAndStartDate(${pckNameLower}, dataUploadInput);
        ${pckNameLower}Repository.saveAndFlush(${pckNameLower});

        UploadFileResponse response = new UploadFileResponse();
        CheckUploadDto<?> check${pckFirstUpperCamel}Result;
        if (dataUploadInput.getType() != null) {
            ${pckFirstUpperCamel}CommonAdapter svc = serviceMap.get(dataUploadInput.getType());
            if (svc != null) {
                check${pckFirstUpperCamel}Result = svc.checkUpload(${pckNameLower});
                ${pckNameLower}.setErrorStatus(check${pckFirstUpperCamel}Result.isErrorStatus());
                ${pckNameLower}.setErrorDescription(check${pckFirstUpperCamel}Result.getErrorDescription());
                svc.saveList(check${pckFirstUpperCamel}Result.getLstDocument(), username);
            }
        }
        BeanUtils.copyProperties(${pckNameLower}, response);

        ${pckNameLower}Repository.saveAndFlush(${pckNameLower});

        response.setId(${pckNameLower}.getId());
        return response;
    }

//    private void setEndDateAndStartDate(${pckFirstUpperCamel} ${pckNameLower}, DataUploadDto dataUploadInput) {
//        if (!CommonUtil.isNullOrEmpty(dataUploadInput.getPeriod())) {
//            String previousPeriod = DateUtils.getPreviousPeriod(dataUploadInput.getPeriod());
//            try {
//                Date startDate = DateUtils.str2MonthYear(previousPeriod, 26);
//                ${pckNameLower}.setStartDate(startDate);
//                Date endDate = DateUtils.str2MonthYear(dataTestInput.getPeriod(), 25);
//                ${pckNameLower}.setEndDate(endDate);
//            } catch (ParseException e) {
//                //khong lam gi
//            }
//        } else if (dataUploadInput.getStartDate() != null) {
//            ${pckNameLower}.setStartDate(dataUploadInput.getStartDate());
//        }
//    }

    /**
     * Duyệt ${pckNameLower}
     *
     * @param request, username, roles  Kênh truyền vào
     * @return
     */
    @Override
    public String approve(ApproveRequest request, String username, List<String> roles) throws BusinessException {
        String result = "";
        Optional<${pckFirstUpperCamel}> o${pckFirstUpperCamel} = ${pckNameLower}Repository.findById(request.getId());
        if (!o${pckFirstUpperCamel}.isPresent()) {
            throw new BusinessException(ValidateErrorCode.RECORD_NOT_EXIST);
        }

        ${pckFirstUpperCamel} ${pckNameLower} = o${pckFirstUpperCamel}.get();
        if (${pckNameLower}.isErrorStatus()) {
            throw new BusinessException(ValidateErrorCode.UNAVAILABLE_STATUS);
        }
        if (!CommonUtil.checkAvailableStatus(${pckNameLower}.getStatus(), roles)) {
            throw new BusinessException(ValidateErrorCode.UNAVAILABLE_STATUS);
        }

        ${pckNameLower}.setApprover(username);
        ${pckNameLower}.setModifiedDate(new Date());
        String status = "";
//        int approveLevel = ${pckFirstUpperCamel}TypeEnum.?.getCode().equals(${pckNameLower}.getType()) ? Constants.APPROVE_THREE_LEVEL : Constants.APPROVE_TWO_LEVEL;
//        status = CommonUtil.getNextStatus(request.getApproveType(), request.getApprover(), roles, approveLevel);
//        if (CommonUtil.isNullOrEmpty(status)) {
//            throw new BusinessException(ValidateErrorCode.UNAVAILABLE_STATUS);
//        }
//        ${pckNameLower}.setStatus(status);

        ${pckFirstUpperCamel}CommonAdapter svc = null;
        if (${pckNameLower}.getType() != null) {
            svc = serviceMap.get(${pckNameLower}.getType());
        }
        if (svc != null) {
            svc.updateStatus(${pckNameLower}.getId(), status);
            if (request.getApproveType().equals("create")) {
                result = ApproveMessageEnum.SEND_APPROVE_SUCCESS.getValue();
            } else if (request.getApproveType().equals("approve")) {
                result = ApproveMessageEnum.APPROVE_SUCCESS.getValue();
            } else if (request.getApproveType().equals("reject")) {
                result = ApproveMessageEnum.REJECT_SUCCESS.getValue();
                ${pckNameLower}.setRejectReason(request.getRejectReason());
            }
            if (StatusConfiguration.ACTIVE.getStatus().equals(status)) {
                ${pckNameLower}.setApprovedDate(new Date());
                svc.updateApproveInfo(${pckNameLower}.getId(), ${pckNameLower}.getApprover(), ${pckNameLower}.getApprovedDate());
            }
        }
        ${pckNameLower}Repository.saveAndFlush(${pckNameLower});
        return result;
    }

    /**
     * Xóa ${pckNameLower}
     *
     * @param id, roles  Kênh truyền vào
     * @return
     */
    @Override
    public String delete(Long id, List<String> roles) throws BusinessException {
        Optional<${pckFirstUpperCamel}> o${pckFirstUpperCamel} = ${pckNameLower}Repository.findById(id);
        if (!o${pckFirstUpperCamel}.isPresent()) {
            throw new BusinessException(ValidateErrorCode.RECORD_NOT_EXIST);
        }
        if (!CommonUtil.checkStatusBeforeDelete(o${pckFirstUpperCamel}.get().getStatus(), roles)) {
            throw new BusinessException(ValidateErrorCode.UNAVAILABLE_STATUS);
        }

        ${pckFirstUpperCamel} ${pckNameLower} = o${pckFirstUpperCamel}.get();
        ${pckNameLower}.setModifiedDate(new Date());
        ${pckNameLower}.setStatus(StatusConfiguration.DELETE.getStatus());
        ${pckNameLower}Repository.saveAndFlush(${pckNameLower});
        if (${pckNameLower}.getType() != null) {
            ${pckFirstUpperCamel}CommonAdapter svc = serviceMap.get(${pckNameLower}.getType());
            if (svc != null) {
                svc.updateStatus(${pckNameLower}.getId(), StatusConfiguration.DELETE.getStatus());
            }
        }
        return "Xoá tài liệu thành công";
    }

    /**
     * Tải thông tin ${pckNameLower}
     *
     * @param id Kênh truyền vào
     * @return
     */
    @Override
    public Object download(Long id) throws BusinessException, IOException {
        Optional<${pckFirstUpperCamel}> o${pckFirstUpperCamel} = ${pckNameLower}Repository.findById(id);
        if (!o${pckFirstUpperCamel}.isPresent()) {
            throw new BusinessException(ValidateErrorCode.NO_DOCUMENT_DATA);
        }
        ${pckFirstUpperCamel} ${pckNameLower} = o${pckFirstUpperCamel}.get();
        InputStream inputStream = null;
        if (${pckNameLower}.getType() != null) {
            ${pckFirstUpperCamel}CommonAdapter svc = serviceMap.get(${pckNameLower}.getType());
            if (svc != null) {
                CheckUploadDto<?> checkUploadResult = svc.checkUpload(${pckNameLower});
                inputStream = new ByteArrayInputStream(checkUploadResult.getData());
            }
        }

        if (inputStream == null) {
            throw new BusinessException(ValidateErrorCode.ERROR_OCCURRED_DOWNLOAD);
        }
        HttpHeaders headers = ExcelUtil.createHeaderExport(${pckNameLower}.getFileName(), ${pckNameLower}.getReportName());
        return new ResponseEntity<>(inputStream.readAllBytes(), headers, HttpStatus.OK);
    }

    /**
     * Lấy thông tin ${pckNameLower}
     *
     * @param id Kênh truyền vào
     * @return
     */
    @Override
    public ${pckFirstUpperCamel} findById(Long id) {
        Optional<${pckFirstUpperCamel}> o${pckFirstUpperCamel} = ${pckNameLower}Repository.findById(id);
        if (o${pckFirstUpperCamel}.isPresent()) {
            return o${pckFirstUpperCamel}.get();
        } else {
            return null;
        }
    }

    /**
     * Tìm kiếm nâng cao
     *
     * @param searchRequest, pageable, roles  Kênh truyền vào
     * @return
     */
    @Override
    public Paging<${pckFirstUpperCamel}Dto> advanceSearch(Search${pckFirstUpperCamel}Request searchRequest, Pageable pageable, List<String> roles) {
        Page<${pckFirstUpperCamel}> page;
        List<Specification<${pckFirstUpperCamel}>> specList = getAdvanceSearchSpecList(searchRequest, roles);
        if (!specList.isEmpty()) {
            Specification<${pckFirstUpperCamel}> spec = specList.get(0);
            for (int i = 1; i < specList.size(); i++) {
                spec = spec.and(specList.get(i));
            }
            page = ${pckNameLower}Repository.findAll(spec, pageable);
        } else {
            page = ${pckNameLower}Repository.findAll(pageable);
        }

        Paging<${pckFirstUpperCamel}Dto> result = new Paging<>();
        result.setItems(CommonUtil.toListObject(page.getContent(), ${pckFirstUpperCamel}Dto.class));
        result.setPageSize(pageable.getPageSize());
        result.setPageNum(pageable.getPageNumber());
        result.setTotalCount(page.getTotalElements());
        return result;
    }

    private List<Specification<${pckFirstUpperCamel}>> getAdvanceSearchSpecList(Search${pckFirstUpperCamel}Request searchRequest, List<String> roles) {
        List<Specification<${pckFirstUpperCamel}>> specList = new ArrayList<>();
#foreach($ppt in $pptPck)
#if($textUtils.wordsToSnakeUpper($ppt.nameColumn) == 'STATUS')
        specList.add(SearchUtil.notEq("status", "D"));
#break
#end
#end
#foreach($ppt in $pptPck)
#if($ppt.canFilter == 'TRUE')
#if($ppt.nameDisplay.isBlank())
#else
#if($textUtils.wordsToSnakeUpper($ppt.type) == 'STRING')
        if (!CommonUtil.isNullOrEmpty(searchRequest.get$textUtils.toPascalCase($ppt.nameProperty)())) {
            specList.add(SearchUtil.eq("$textUtils.wordsToCamel($ppt.nameProperty)", searchRequest.get$textUtils.toPascalCase($ppt.nameProperty)()));
        }
#else
        if (searchRequest.get$textUtils.toPascalCase($ppt.nameProperty)() != null) {
            specList.add(SearchUtil.eq("$textUtils.wordsToCamel($ppt.nameProperty)", searchRequest.get$textUtils.toPascalCase($ppt.nameProperty)()));
        }
#end
#end
#end
#end
        return specList;
    }
}
