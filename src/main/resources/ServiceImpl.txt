package ${basePackage}.${pckNameLower}.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.springframework.transaction.annotation.Transactional;
import com.monitorjbl.xlsx.StreamingReader;
import lombok.extern.log4j.Log4j2;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.sql.Types;
import java.util.*;
#set($setCase = 'F')
#set($parseUtil = 'F')
#foreach($header in $lstHeader)
#foreach($pptHd in $ppts)
#if($header == $pptHd.nameDisplay)
#set($setCase = 'S')
#if($textUtils.wordsToSnakeUpper($pptHd.type) == 'BYTE' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'INTEGER' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'INT' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'LONG' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'FLOAT' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'DOUBLE' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'SHORT' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'DATE' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'BIGDECIMAL')
#set($parseUtil = 'S')
#end
#end
#end
#end

import ${basePackageImport}.core.util.CommonUtil;
import ${basePackageImport}.core.util.ExcelUtil;
#if(${setCase} == 'S' && ${parseUtil} == 'S')
import ${basePackageImport}.core.util.FieldParserUtil;
#end
import ${basePackageImport}.model.Constants;
#if(${setCase} == 'S')
import ${basePackageImport}.model.enumeration.ErrorEnum;
#end
import ${basePackageImport}.model.dto.exception.BusinessException;
import ${basePackageImport}.model.dto.catalog.CatalogDto;
import ${basePackageImport}.model.entity.${pckNameLower}.${ettFirstUpperCamel};
import ${basePackageImport}.model.entity.${pckNameLower}.${pckFirstUpperCamel};
import ${basePackageImport}.model.enumeration.${pckFirstUpperCamel}TypeEnum;
import ${basePackageImport}.model.dto.upload.CheckUploadDto;
import ${basePackageImport}.core.integration.ChCatalogClient;
import ${basePackage}.${pckNameLower}.service.adapter.${pckFirstUpperCamel}CommonAdapter;

/**
 * @author khanhtd
 * @Date 2023
 */
@Service
@Log4j2
public class ${ettFirstUpperCamel}ServiceImpl implements ${pckFirstUpperCamel}CommonAdapter {
#foreach($ppt in $ppts)
#set($codeEnum = $textUtils.wordsToSnakeUpper(${ppt.lineKey}).concat("_").concat($textUtils.wordsToSnakeUpper(${ppt.typeKey})).concat("_").concat($textUtils.wordsToSnakeUpper(${ppt.entityKey})))
#break
#end
    public static final int FIRST_COL_NUM = 0;
#if($!{headerSize})

    public static final int LAST_COL_NUM = ${headerSize};
#else

    public static final int LAST_COL_NUM = 0;
#end
#if($!{lstHeaderString})

    static final String[] ${codeEnum}_HEADERS = {${lstHeaderString}};
#else

    static final String[] ${codeEnum}_HEADERS = {};
#end

    @Autowired
    private ChCatalogClient catalogClient;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Override
    public CheckUploadDto checkUpload(${pckFirstUpperCamel} ${pckNameLower}) throws IOException, BusinessException {
        boolean errorStatus = false;
        int countErrorRow = 0;
        List<${ettFirstUpperCamel}> listBooks = new ArrayList<>();
        ByteArrayInputStream inputStream = new ByteArrayInputStream(${pckNameLower}.getData());

        CheckUploadDto<${ettFirstUpperCamel}> checkUploadDto;
        // Tạo một Workbook mới để chỉnh sửa và thêm cột mới
        try (Workbook originWorkbook = StreamingReader.builder()
                .rowCacheSize(100)
                .bufferSize(4096)
                .open(inputStream);
             SXSSFWorkbook modifiedWorkbook = new SXSSFWorkbook()
        ) {
            // Get sheet
            Sheet originSheet = originWorkbook.getSheetAt(0);
            Sheet modifiedSheet = modifiedWorkbook.createSheet(originSheet.getSheetName());

            // Get all rows
            Iterator<Row> originIterator = originSheet.iterator();
            boolean hasHeader = false;
            while (originIterator.hasNext()) {
                Row nextOriginRow = originIterator.next();
                Row modifiedRow = modifiedSheet.createRow(nextOriginRow.getRowNum());

                if (!hasHeader) {
                    for (int col = 0; col < ${codeEnum}_HEADERS.length; col++) {
                        Cell cell = modifiedRow.createCell(col);
                        cell.setCellValue(${codeEnum}_HEADERS[col]);
                    }
                }

                Cell errorCell = modifiedRow.createCell(LAST_COL_NUM + 1, CellType.STRING);
                if (nextOriginRow.getRowNum() == 0) {
                    errorCell.setCellValue("Error");
                }

                if (nextOriginRow.getRowNum() == 0) {
                    continue;
                }

                boolean errorCellValueIsNull = false;
                ${ettFirstUpperCamel} book = new ${ettFirstUpperCamel}();
                for (int columnIndex = FIRST_COL_NUM; columnIndex <= LAST_COL_NUM; columnIndex++) {
                    Cell originCell = nextOriginRow.getCell(columnIndex);
                    Cell modifiedCell = modifiedRow.createCell(columnIndex);
                    Object cellValue = ExcelUtil.getCellValue(originCell);

#if(${setCase} == 'F')
                    //TODO: không tìm thấy thông tin thích hợp trong excel
#else
                    try {
                        switch (columnIndex) {
#foreach($header in $lstHeader)
#set($caseNum = ${foreach.index})
#foreach($pptHd in $ppts)
#if($textUtils.wordsToSnakeUpper($pptHd.nameColumn) == 'STATUS')
#set($fieldStatusRef = $textUtils.toPascalCase($pptHd.nameProperty))
#end
#if($textUtils.wordsToSnakeUpper($pptHd.nameColumn) == 'CREATED_DATE')
#set($fieldCreateDateRef = $textUtils.toPascalCase($pptHd.nameProperty))
#end
#if($textUtils.wordsToLowerCase($pptHd.refType) == ${pckNameLower})
#set($fieldIdRef = $textUtils.toPascalCase($pptHd.nameProperty))
#end
#if($textUtils.wordsToLowerCase($pptHd.idType) == 'uuid' || $textUtils.wordsToLowerCase($pptHd.idType) == 'seq')
#set($fieldId = $textUtils.toPascalCase($pptHd.nameProperty))
#end
#if($textUtils.removeAccentAndUpper($header) == $textUtils.removeAccentAndUpper($pptHd.nameDisplay))
                            case ${caseNum}:
                                if (cellValue != null) {
                                    modifiedCell.setCellValue(originCell.getStringCellValue());
#if($pptHd.isCatalog == 'TRUE')
                                    List<CatalogDto> lstTitle = catalogClient.findByLineTypeCode("", "", "");
                                    String cellValueCatalog = lstTitle.stream().filter(c -> c.getLabel().equals(cellValue)).map(CatalogDto::getLabelCode).findFirst().orElse(null);
                                    if (!CommonUtil.isNullOrEmpty(cellValueCatalog)) {
                                        book.set$textUtils.toPascalCase(${pptHd.nameProperty})(cellValueCatalog);
                                    } else {
                                        errorStatus = true;
                                        errorCellValueIsNull = setErrorCellValue(errorCell, columnIndex, errorCellValueIsNull, Constants.ErrorMessageExcel.INVALID_VALUE);
                                    }
#elseif($textUtils.wordsToSnakeUpper($pptHd.type) == 'INTEGER' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'INT')
                                    book.set$textUtils.toPascalCase(${pptHd.nameProperty})(FieldParserUtil.parseInt(cellValue));
#elseif($textUtils.wordsToSnakeUpper($pptHd.type) == 'BYTE' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'LONG' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'FLOAT' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'DOUBLE' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'SHORT' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'DATE' || $textUtils.wordsToSnakeUpper($pptHd.type) == 'BIGDECIMAL')
                                    book.set$textUtils.toPascalCase(${pptHd.nameProperty})(FieldParserUtil.parse$textUtils.toPascalCase(${pptHd.type})(cellValue));
#else
                                    book.set$textUtils.toPascalCase(${pptHd.nameProperty})(String.valueOf(cellValue));
#end
#if($pptHd.checkEmpty == 'TRUE')
                                } else {
                                    errorStatus = true;
                                    errorCellValueIsNull = setErrorCellValue(errorCell, columnIndex, errorCellValueIsNull, Constants.ErrorMessageExcel.CAN_NOT_BE_EMPTY);
#end
                                }
                                break;
#end
#end
#end
                            default:
                                break;
                        }
                    } catch (Exception ex) {
                        throw new BusinessException(ErrorEnum.ERROR_OCCURRED_UPLOAD);
                    }
#end
                }
                book.set${fieldId}(UUID.randomUUID().toString().toLowerCase());
                book.set${fieldIdRef}(${pckNameLower}.getId());
                book.set${fieldStatusRef}(${pckNameLower}.getStatus());
                book.set${fieldCreateDateRef}(${pckNameLower}.getCreatedDate());
                listBooks.add(book);

                if (errorCellValueIsNull) {
                    countErrorRow++;
                }
            }

            checkUploadDto = new CheckUploadDto<>();
            // nếu không có cell nào lỗi thì xuất ra file gốc, ngược lại xuất ra file lỗi
            if (!errorStatus) {
                checkUploadDto.setData(${pckNameLower}.getData());
            } else {
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                modifiedWorkbook.write(outputStream);
                checkUploadDto.setData(outputStream.toByteArray());
            }
            checkUploadDto.setErrorStatus(errorStatus);
            if (countErrorRow > 0) {
                checkUploadDto.setErrorDescription(countErrorRow + " bản ghi lỗi");
            }
            checkUploadDto.setLstDocument(listBooks);

            inputStream.close();
        }
        return checkUploadDto;
    }

    public boolean setErrorCellValue(Cell errorCell, int errorCellIndex, boolean hasCellNull, String error) {
        if (!hasCellNull) {
            errorCell.setCellValue(error + " cột " + ExcelUtil.convertIndexToColumnName(errorCellIndex + 1));
        } else {
            String errorCellValue = errorCell.getStringCellValue();
            errorCell.setCellValue(errorCellValue + ", " + error + " cột " + ExcelUtil.convertIndexToColumnName(errorCellIndex + 1));
        }
        return true;
    }

    @Override
    @Transactional(rollbackFor = BusinessException.class)
    public boolean saveList(List<?> input) {
        List<${ettFirstUpperCamel}> list = CommonUtil.toListObject(input, ${ettFirstUpperCamel}.class);
        int batchSize = 5000;
#set($uniqueFieldName = [])
#foreach($ppt in $ppts)
#if($textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'APPROVER' && $textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'APPROVED_DATE' && $textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'CREATOR' && $textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'MODIFIED_DATE' && $textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'MODIFIED_BY')
#if($!{fieldSql} && $foreach.last)
#set($fieldSql = ${fieldSql} + $textUtils.wordsToSnakeUpper($ppt.nameColumn))
#set($addUniqueFieldName = $uniqueFieldName.add($textUtils.wordsToSnakeUpper($ppt.nameColumn)))
#set($valueSql = ${valueSql} + "?")
#elseif($!{fieldSql})
#set($fieldSql = ${fieldSql} + $textUtils.wordsToSnakeUpper($ppt.nameColumn).concat(", "))
#set($addUniqueFieldName = $uniqueFieldName.add($textUtils.wordsToSnakeUpper($ppt.nameColumn)))
#set($valueSql = ${valueSql} + "?, ")
#elseif($foreach.last)
#set($fieldSql = $textUtils.wordsToSnakeUpper($ppt.nameColumn))
#set($addUniqueFieldName = $uniqueFieldName.add($textUtils.wordsToSnakeUpper($ppt.nameColumn)))
#set($valueSql = "?")
#else
#set($fieldSql = $textUtils.wordsToSnakeUpper($ppt.nameColumn).concat(", "))
#set($addUniqueFieldName = $uniqueFieldName.add($textUtils.wordsToSnakeUpper($ppt.nameColumn)))
#set($valueSql = "?, ")
#end
#end
#end
#if($!{fieldSql} && $!{valueSql})
#set($fieldSqlDone = $textUtils.checkAccentSql(${fieldSql}))
#set($valueSqlDone = $textUtils.checkAccentSql(${valueSql}))
        String sql = "INSERT INTO NSLD_APP.${codeEnum} (${fieldSqlDone}) " +
                "VALUES (${valueSqlDone})";
        jdbcTemplate.batchUpdate(
                sql,
                list,
                batchSize,
                (ps, obj) -> {
#foreach($fieldName in $uniqueFieldName)
#set($countSaveLst = $foreach.count)
#foreach($ppt in $ppts)
#if($textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'APPROVER' && $textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'APPROVED_DATE' && $textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'CREATOR' && $textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'MODIFIED_DATE' && $textUtils.wordsToSnakeUpper($ppt.nameColumn) != 'MODIFIED_BY')
#if($textUtils.wordsToSnakeUpper($ppt.nameColumn) == $fieldName)
#if($textUtils.wordsToSnakeUpper($ppt.type) == 'DATE')
                    ps.setDate(${countSaveLst}, new java.sql.Date(obj.get$textUtils.toPascalCase(${ppt.nameProperty})().getTime()));
#elseif($textUtils.wordsToSnakeUpper($ppt.type) == 'LONG')
                    ps.setLong(${countSaveLst}, obj.get$textUtils.toPascalCase(${ppt.nameProperty})());
#elseif($textUtils.wordsToSnakeUpper($ppt.type) != 'STRING')
                    if (obj.get$textUtils.toPascalCase(${ppt.nameProperty})() != null) {
#if($textUtils.wordsToSnakeUpper($ppt.type) == "INT" || $textUtils.wordsToSnakeUpper($ppt.type) == "INTEGER")
                        ps.setInt(${countSaveLst}, obj.get$textUtils.toPascalCase(${ppt.nameProperty})());
#else
                        ps.set$textUtils.toPascalCase($ppt.type)(${countSaveLst}, obj.get$textUtils.toPascalCase(${ppt.nameProperty})());
#end
                    } else {
                        ps.setNull(${countSaveLst}, Types.$textUtils.wordsToSnakeUpper($ppt.type));
                    }
#else
                    ps.setString(${countSaveLst}, obj.get$textUtils.toPascalCase(${ppt.nameProperty})());
#end
#end
#end
#end
#if($foreach.last)
                });
#end
#end
#end
        return true;
    }

#foreach($ppt in $ppts)
#if($textUtils.wordsToLowerCase($ppt.refType) == ${pckNameLower})
#set($idRefCol = $textUtils.wordsToSnakeUpper($ppt.nameColumn))
#end
#if($textUtils.wordsToSnakeUpper($ppt.nameColumn) == 'STATUS')
#set($updateStatus = 'S')
#end
#if($textUtils.wordsToSnakeUpper($ppt.nameColumn) == 'APPROVER')
#set($checkApprover = 'S')
#end
#if($textUtils.wordsToSnakeUpper($ppt.nameColumn) == 'APPROVED_DATE')
#set($checkApprovedDate = 'S')
#end
#end
#if($!{idRefCol})
    @Override
    @Transactional(rollbackFor = BusinessException.class)
    public boolean cleanAllById(Long ${pckNameLower}Id) {
        if (${pckNameLower}Id != null) {
            String sql = "DELETE FROM NSLD_APP.${codeEnum} WHERE ${idRefCol} = ?";
            jdbcTemplate.update(sql, ${pckNameLower}Id);
            return true;
        }
        return false;
    }

#else
    @Override
    @Transactional(rollbackFor = BusinessException.class)
    public boolean cleanAllById(Long ${pckNameLower}Id) {
        return false;
    }

#end
#if($!{updateStatus} && $!{idRefCol})
    @Override
    @Transactional(rollbackFor = BusinessException.class)
    public boolean updateStatus(Long ${pckNameLower}Id, String status) {
        if (${pckNameLower}Id != null) {
            String sql = "UPDATE NSLD_APP.${codeEnum} SET STATUS = ? WHERE ${idRefCol} = ?";
            jdbcTemplate.update(sql, status, ${pckNameLower}Id);
            return true;
        }
        return false;
    }

#else
    @Override
    @Transactional(rollbackFor = BusinessException.class)
    public boolean updateStatus(Long ${pckNameLower}Id, String status) {
        return false;
    }

#end
#if($!{checkApprover} && $!{checkApprovedDate} && $!{idRefCol})
    @Override
    @Transactional(rollbackFor = BusinessException.class)
    public boolean updateApproveInfo(Long ${pckNameLower}Id, String approver, Date approvedDate) {
        if (${pckNameLower}Id != null) {
            String sql = "UPDATE NSLD_APP.${codeEnum} SET APPROVER = ?, APPROVED_DATE = ? WHERE ${idRefCol} = ?";
            jdbcTemplate.update(sql, approver, approvedDate, ${pckNameLower}Id);
            return true;
        }
        return false;
    }

#else
    @Override
    @Transactional(rollbackFor = BusinessException.class)
    public boolean updateApproveInfo(Long ${pckNameLower}Id, String approver, Date approvedDate) {
        return false;
    }

#end
    @Override
    public String getSupportService() {
        return ${pckFirstUpperCamel}TypeEnum.${codeEnum}.getCode();
    }
}
