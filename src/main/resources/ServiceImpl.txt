package ${basePackage}.${mdlNameLower}.${ettNameLower}.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ${basePackage}.model.enumeration.ErrorEnum;
import ${basePackage}.common.exception.BaseException;
import ${basePackage}.common.data.service.BaseJdbcServiceImpl;
import ${basePackage}.common.util.CommonUtil;
import ${basePackage}.common.util.SearchUtil;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.dto.${ettNamePpt}Dto;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.dto.${ettNamePpt}Request;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.entity.${ettNamePpt};
import ${basePackage}.${mdlNameLower}.${ettNameLower}.repo.${ettNamePpt}Repo;

import javax.persistence.EntityManager;
import javax.sql.DataSource;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Transactional
public class ${ettNamePpt}ServiceImpl extends BaseJdbcServiceImpl<${ettNamePpt}, String> implements ${ettNamePpt}Service {

    private final Logger log = LoggerFactory.getLogger(${ettNamePpt}ServiceImpl.class);

    private ${ettNamePpt}Repo ${ettNameCamel}Repo;

    public ${ettNamePpt}ServiceImpl(DataSource dataSource, EntityManager entityManager, ${ettNamePpt}Repo ${ettNameCamel}Repo) {
        super(dataSource, entityManager, ${ettNamePpt}.class);
        this.${ettNameCamel}Repo = ${ettNameCamel}Repo;
    }


    @Override
    public String create(${ettNamePpt}Request request) {
        log.debug("Request to save ${ettNamePpt} : {}", request);
        ${ettNamePpt} ett = new ${ettNamePpt}();
        BeanUtils.copyProperties(request, ett);
        ett.setId(UUID.randomUUID().toString());
        ${ettNameCamel}Repo.save(ett);
        return ett.getId();
    }

    @Override
    public void update(${ettNamePpt}Request request) throws BaseException {
        log.debug("Request to update ${ettNamePpt} : {}", request);
        if (CommonUtil.isNullOrEmpty(request.getId())) {
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, request.getId(), null);
        }
        ${ettNamePpt} ett = new ${ettNamePpt}();
        BeanUtils.copyProperties(request, ett);
        ${ettNameCamel}Repo.save(ett);
    }

    @Override
    public List<${ettNamePpt}Dto> advancedSearch(${ettNamePpt}Request request, Pageable pageable) {
        log.debug("Request to search ${ettNamePpt} : {}", request);
        List<Specification<${ettNamePpt}>> list = getAdvanceSearchSpecList(request);
        Page<${ettNamePpt}> page;
        if(!CommonUtil.listIsEmptyOrNull(list)){
            Specification<${ettNamePpt}> spec = list.get(0);
            for (int i = 1; i < list.size(); i++) {
                spec = spec.and(list.get(i));
            }
            page = $textUtils.wordsToCamel(${ett.nameProperty}).concat("").concat("Repo.findAll(spec, pageable);")
        } else {
            page = $textUtils.wordsToCamel(${ett.nameProperty}).concat("").concat("Repo.findAll(pageable);")
        }
        if (page.getTotalElements() > 0) {
            return page.map(existing -> {
                ${ettNamePpt}Dto dto = new ${ettNamePpt}Dto();
                try {
                    BeanUtils.copyProperties(existing, dto);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return dto;
            }).stream().collect(Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }

    private List<Specification<${ettNamePpt}>> getAdvanceSearchSpecList(
            ${ettNamePpt}Request request) {
        List<Specification<${ettNamePpt}>> spec = new ArrayList<>();
#foreach($ppt in $ppts)
#if($ppt.required == 'TRUE')
#if($ppt.type == 'String')
        if (!CommonUtil.isNullOrEmpty(request.get$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})())) {
             spec.add(SearchUtil.eq("$textUtils.wordsToCamel(${ppt.nameProperty})", request.get$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})()));
        }
#else
        if (request.get$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})() != null) {
             spec.add(SearchUtil.eq("$textUtils.wordsToCamel(${ppt.nameProperty})", request.get$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})()));
        }
#end
#end
#end
        return spec;
    }

    @Override
    public void delete(String id) throws BaseException {
        log.debug("Request to delete ${ettNamePpt} : {}", id);
        if (CommonUtil.isNullOrEmpty(id)) {
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, id, null);
        }
        ${ettNameCamel}Repo.deleteById(id);
    }

    @Override
    public void approve(String id) throws BaseException {
        log.debug("Request to approve ${ettNamePpt} : {}", id);
        if (CommonUtil.isNullOrEmpty(id)) {
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, id, null);
        }
        //$textUtils.wordsToCamel(${ett.nameProperty}).concat("").concat("Repo.approve(null, id);")
    }
}
