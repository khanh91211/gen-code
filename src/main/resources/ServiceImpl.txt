package ${basePackage}.${ettNameLower}.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ${basePackage}.model.enumeration.ErrorEnum;
import ${basePackage}.common.exception.BaseException;
import ${basePackage}.common.data.service.BaseJdbcServiceImpl;
import ${basePackage}.common.util.CommonUtil;
import ${basePackage}.common.util.SearchUtil;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.dto.${ettNameCamel}Dto;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.dto.${ettNameCamel}Request;
import ${basePackage}.${mdlNameLower}.${ettNameLower}.entity.${ettNameCamel};
import ${basePackage}.${mdlNameLower}.${ettNameLower}.repo.${ettNameCamel}Repo;
#set($uniqueEttRef = [])
#foreach($ppt in $ppts)
#set($ref = $ppt.refType)
#if($ref.isBlank() && $ref == ${ppt.entityKey} && $uniqueEttRef.contains( $ppt.refType ) )
#elseif($ref == ${ett.nameProperty} )
#else
#set($addUniqueEttRef = $uniqueEttRef.add($ref))
#end
#end
#foreach($ettRef in $uniqueEttRef)
#if($ettRef.isBlank())
#else
import ${basePackage}.${mdlNameLower}.$textUtils.wordsToLowerCase(${ettRef.toString()}).concat(".repo.").concat($textUtils.wordsToCamelFirstUpper(${ettRef.toString()})).concat("Repo;")
import ${basePackage}.${mdlNameLower}.$textUtils.wordsToLowerCase(${ettRef.toString()}).concat(".dto.").concat($textUtils.wordsToCamelFirstUpper(${ettRef.toString()})).concat("Dto;")
#end
#end

import javax.persistence.EntityManager;
import javax.sql.DataSource;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Service
@Transactional
public class ${ettNameCamel}ServiceImpl extends BaseJdbcServiceImpl<${ettNameCamel}, String> implements ${ettNameCamel}Service {

    private final Logger log = LoggerFactory.getLogger(${ettNameCamel}ServiceImpl.class);

    private ${ettNameCamel}Repo ${ettNameCamel}Repo;
#set($repoEx = "")
#set($repoExtend = "")
#foreach($ettRef in $uniqueEttRef)
#if($ettRef.isBlank())
#else
    private ${ettRef.toString()}Repo $textUtils.wordsToCamel(${ettRef.toString()})Repo;
#if($repoEx.isBlank())
#set($repoExtend = $repoEx.concat(${ettRef.toString()}).concat("Repo ").concat($textUtils.wordsToCamel(${ettRef.toString()})).concat("Repo"))
#else
#set($repoExtend = $repoEx.concat(",").concat(${ettRef.toString()}).concat("Repo ").concat($textUtils.wordsToCamel(${ettRef.toString()})).concat("Repo"))
#end
#end
#end
#if( $repoExtend.isBlank())
    public ${ettNameCamel}ServiceImpl(DataSource dataSource, EntityManager entityManager, ${ettNameCamel}Repo ${ettNameCamel}Repo) {
#else
    public ${ettNameCamel}ServiceImpl(DataSource dataSource, EntityManager entityManager, ${ettNameCamel}Repo ${ettNameCamel}Repo, $repoExtend) {
#end
        super(dataSource, entityManager, ${ettNameCamel}.class);
        this.${ettNameCamel}Repo = ${ettNameCamel}Repo;
#foreach($ettRef in $uniqueEttRef)
#if($ettRef.isBlank())
#else
        this.$textUtils.wordsToCamel(${ettRef.toString()})Repo = $textUtils.wordsToCamel(${ettRef.toString()})Repo;
#end
#end
    }

    @Override
    public String taoMoi(${ettNameCamel}Request request) {
        log.debug("Yeu cau taoMoi ${ettNameCamel} : {}", request);
        ${ettNameCamel} ett = new ${ettNameCamel}();
        BeanUtils.copyProperties(request, ett);
        ett.setId(UUID.randomUUID().toString());
        ${ettNameCamel}Repo.save(ett);
        return ett.getId();
    }

    @Override
    public void capNhat(${ettNameCamel}Request request) throws BaseException {
        log.debug("Yeu cau capNhat ${ettNameCamel} : {}", request);
        if (CommonUtil.isNullOrEmpty(request.getId())) {
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, request.getId(), null);
        }
        ${ettNameCamel} ett = new ${ettNameCamel}();
        BeanUtils.copyProperties(request, ett);
        ${ettNameCamel}Repo.save(ett);
    }

    @Override
    public Page<${ettNameCamel}> timKiemNangCao(${ettNameCamel}Request request, Pageable pageable) {
        log.debug("Yeu cau timKiemNangCao ${ettNameCamel} : {}", request);
        List<Specification<${ettNameCamel}>> list = getAdvanceSearchSpecList(request);
        if(!CommonUtil.listIsEmptyOrNull(list)){
            Specification<${ettNameCamel}> spec = list.get(0);
            for (int i = 1; i < list.size(); i++) {
                spec = spec.and(list.get(i));
            }
            return $textUtils.wordsToCamel(${ett.nameProperty}).concat("").concat("Repo.findAll(spec, pageable);")
        } else {
            return $textUtils.wordsToCamel(${ett.nameProperty}).concat("").concat("Repo.findAll(pageable);")
        }
    }

    private List<Specification<${ettNameCamel}>> getAdvanceSearchSpecList(
            ${ettNameCamel}Request request) {
        List<Specification<${ettNameCamel}>> spec = new ArrayList<>();
#foreach($ppt in $ppts)
#if($ppt.required == 'TRUE')
#if($ppt.type == 'String')
        if (!CommonUtil.isNullOrEmpty(request.get$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})())) {
             spec.add(SearchUtil.eq("$textUtils.wordsToCamel(${ppt.nameProperty})", request.get$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})()));
        }
#else
        if (request.get$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})() != null) {
             spec.add(SearchUtil.eq("$textUtils.wordsToCamel(${ppt.nameProperty})", request.get$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})()));
        }
#end
#end
#end
        return spec;
    }

    @Override
    public void xoa(String id) throws BaseException {
        log.debug("Yeu cau xoa ${ettNameCamel} : {}", id);
        if (CommonUtil.isNullOrEmpty(id)) {
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, id, null);
        }
        ${ettNameCamel}Repo.deleteById(id);
    }

    @Override
    public void duyet(String id) throws BaseException {
        log.debug("Yeu cau duyet ${ettNameCamel} : {}", id);
        if (CommonUtil.isNullOrEmpty(id)) {
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, id, null);
        }
        //$textUtils.wordsToCamel(${ett.nameProperty}).concat("").concat("Repo.approve(null, id);")
    }

#foreach($ppt in $ppts)
#set($namePptCamel = $textUtils.wordsToCamel(${ppt.nameProperty}))
#set($ref = $ppt.refType)
#set($canFilterBy = $ppt.canFilterBy)
#if($ref.isBlank() && $canFilterBy.isBlank())
#elseif($ref.isBlank() && $canFilterBy == 'TRUE')
    @Override
    public List<${ppt.entityKey}Dto> timTheo$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})(${ppt.type} $textUtils.wordsToCamel(${ppt.nameProperty})) throws BaseException {
        log.debug("Yeu cau timTheo$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty}) : {}", $textUtils.wordsToCamel(${ppt.nameProperty}));
#if(${ppt.type} != 'String')
        if ($textUtils.wordsToCamel(${ppt.nameProperty}) != null) {
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, String.valueOf($textUtils.wordsToCamel(${ppt.nameProperty})), null);
#else
        if (CommonUtil.isNullOrEmpty($textUtils.wordsToCamel(${ppt.nameProperty}))) {
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, $textUtils.wordsToCamel(${ppt.nameProperty}), null);
#end
        }
        return $textUtils.wordsToCamel(${ppt.entityKey}).concat("Repo.findBy").concat($textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})).concat("(").concat($namePptCamel).concat(");")
    }

#elseif($ref != ${ppt.entityKey} && $canFilterBy == 'TRUE')
    @Override
    public List<${ppt.refType}Dto> tim${ppt.refType}Theo$textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})(${ppt.type} $textUtils.wordsToCamel(${ppt.nameProperty})) throws BaseException {
        log.debug("Yeu cau tim ${ppt.entityKey} theo $textUtils.wordsToCamelFirstUpper(${ppt.nameProperty}) : {}", $textUtils.wordsToCamel(${ppt.nameProperty}));
#if(${ppt.type} != 'String')
        if ($textUtils.wordsToCamel(${ppt.nameProperty}) != null) {
#else
        if (CommonUtil.isNullOrEmpty($textUtils.wordsToCamel(${ppt.nameProperty}))) {
#end
            throw new BaseException(ErrorEnum.APP_VALID_ERROR_IS_NOT_NULL, $textUtils.wordsToCamel(${ppt.nameProperty}), null);
        }
        return $textUtils.wordsToCamel(${ppt.refType}).concat("Repo.find").concat(${ppt.refType}).concat("By").concat($textUtils.wordsToCamelFirstUpper(${ppt.nameProperty})).concat("(").concat($namePptCamel).concat(");")
    }

#end
#end
}
